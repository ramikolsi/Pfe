pipeline {
    agent none

    stages {
        stage('Clone Repository and Copy Files') {
            agent {
                label 'local_machine'
            }
            steps {
                script {
                    def repoDir = 'C:\\Users\\MSI\\OneDrive\\Bureau\\Pfe'
                    def gitCloneCommand = 'cd "C:\\Users\\MSI\\OneDrive\\Bureau" && git clone https://github.com/ramikolsi/Pfe.git'

                    // Check if the directory exists using PowerShell and set dirExists accordingly
                    def dirExists = bat(script: "powershell -Command \"if (Test-Path -Path '${repoDir}') { exit 0 } else { exit 1 }\"", returnStatus: true) == 0

                    if (!dirExists) {
                        bat gitCloneCommand
                    }
                }
                bat 'copy /Y "C:\\Users\\MSI\\OneDrive\\Bureau\\Pfe\\vagrant_windows" "C:\\vaggrant\\Vagrantfile"'
                bat 'copy /Y "C:\\Users\\MSI\\OneDrive\\Bureau\\Pfe\\linux_vagrant" "C:\\vagggrant\\Vagrantfile"'
                bat 'copy /Y "C:\\Users\\MSI\\OneDrive\\Bureau\\Pfe\\prometheus.yml" "C:\\prometheus\\config\\prometheus.yml"'
            }
        }
         stage('User Input') {
            agent any
            steps {
                script {
                    def userInput = input message: 'Choose which VM(s) to start:', parameters: [choice(choices: 'Windows\nLinux\nBoth\nnew_vm', description: 'Select VM(s) to start', name: 'VM')]
                    env.USER_INPUT = userInput
                }
            }
        }
        stage('Modify Windows_VM Configuration') {
            agent {
                label 'local_machine'
            }
            when {
                expression { env.USER_INPUT == 'Windows' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    // Path to the Vagrantfile
                    def filePath = 'C:\\vaggrant\\Vagrantfile'

                    // Read the content of the Vagrantfile
                    def vagrantfileContent = readFile(filePath)
                    def memoryInput = input message: 'Enter memory value for  VM (MB):', parameters: [string(defaultValue: '2050', description: 'Memory for Windows VM', name: 'MEMORY_WINDOWSS')]
                    def cpuInput = input message: 'Enter number of CPUs for  VM:', parameters: [string(defaultValue: '4', description: 'Number of CPUs for Windows VM', name: 'CPUS_WINDOWSS')]
                    // Define the modification
                    def modification = """
                    vb.memory = ${memoryInput}
                    vb.cpus = ${cpuInput}
                    """

                    // Perform the modification
                    def newVagrantfileContent = vagrantfileContent.replaceAll(/(windows\.vm\.provider "virtualbox" do \|vb\|)/, "\$1\n\t\t${modification}")

                    // Write back the modified content to the Vagrantfile
                    writeFile(file: filePath, text: newVagrantfileContent)
                }
            }
        }
        stage('Modify Linux_VM Configuration') {
            agent {
                label 'local_machine'
            }
            when {
                expression { env.USER_INPUT == 'Linux' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    // Path to the Vagrantfile
                    def filePath = 'C:\\vagggrant\\Vagrantfile'

                    // Read the content of the Vagrantfile
                    def vagrantfileContent = readFile(filePath)
                    def memoryInput = input message: 'Enter memory value for  VM (MB):', parameters: [string(defaultValue: '2050', description: 'Memory for Linux VM', name: 'MEMORY_LINUX')]
                    def cpuInput = input message: 'Enter number of CPUs for  VM:', parameters: [string(defaultValue: '4', description: 'Number of CPUs for Linux VM', name: 'CPUS_LINUX')]
                    // Define the modification
                    def modification = """
                    vb.memory = ${memoryInput}
                    vb.cpus = ${cpuInput}
                    """

                    // Perform the modification
                    def newVagrantfileContent = vagrantfileContent.replaceAll(/(linux\.vm\.provider "virtualbox" do \|vb\|)/, "\$1\n\t\t${modification}")

                    // Write back the modified content to the Vagrantfile
                    writeFile(file: filePath, text: newVagrantfileContent)
                }
            }
        }
        stage('Vagrant Up') {
            agent {
                label 'local_machine'
            }
            steps {
                script {
                    def virtualBoxManage = '"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe"'
                    def vagrantPath = 'C:/vagrant'
                    catchError(buildResult: 'SUCCESS') {
                        bat "cd ${vagrantPath} && vagrant up"
                    }
                }
            }
        }
        stage('Rename VMs') {
            agent {
                label 'local_machine'  // Ensure this is the correct label for your local machine node
            }
             when {
                expression { env.USER_INPUT == 'Windows' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    // PowerShell script to rename VMs
                    def renameVmsScript = '''
                    $vms = & "C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe" list vms
                    $pattern = '^"vaggrant_windows_vm_(.+?)"'
                    foreach ($vm in $vms) {
                        $vmInfo = $vm -split '\\s+'
                        $vmName = $vmInfo[0]
                        if ($vmName -match $pattern) {
                            & "C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe" modifyvm "$vmName" --name "vagrant_windows_vm"
                        }
                    }
                    '''

                    // Write the PowerShell script to a temporary file
                    writeFile file: 'renameVms.ps1', text: renameVmsScript

                    def vagrantPath = 'C:/vaggrant'
                    catchError(buildResult: 'SUCCESS') {
                        bat "cd ${vagrantPath} && vagrant up"
                    }
                     catchError(buildResult: 'SUCCESS') {
                         bat "cd ${vagrantPath} && vagrant suspend"
                     }
                    // Execute the PowerShell script with administrative privileges
                    bat '''
                    powershell -Command "Start-Process PowerShell -ArgumentList '-NoProfile -ExecutionPolicy Bypass -File \\"C:\\home\\vagrant\\agent\\workspace\\test\\renameVms.ps1\\"' -Verb RunAs"
                    '''
                }
            }
        }
         stage('Vagrant Up windows') {
            agent {
                label 'local_machine'
            }
            when {
                expression { env.USER_INPUT == 'Windows' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    // Define the path where your Vagrantfile is located
                    def vagrantPath = 'C:/vaggrant'
                    catchError(buildResult: 'SUCCESS') {
                        bat "cd ${vagrantPath} && vagrant up"
                    }
                }
            }
        }
  stage('Configure VM IP Address') {
            agent {
                label 'local_machine'
            }
            when {
                expression { env.USER_INPUT == 'Windows' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    // PowerShell script to configure VM IP address
                    def configureIpScript = '''
                    try {
                        Write-Output "Getting VM IP address..."
                        $output = & "C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe" guestproperty get "vagrant_windows_vm" "/VirtualBox/GuestInfo/Net/1/V4/IP"
                        Write-Output "VBoxManage output: $output"

                        # Extract the IPv4 address from the output
                        $ipAddress = $output -replace '.*Value: (\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}).*', '$1'
                        Write-Output "Extracted IP address: $ipAddress"

                        # Set the IPv4 address to an environment variable
                        $env:VM_IP_Address = $ipAddress
                        Write-Output "Set environment variable VM_IP_Address: $env:VM_IP_Address"

                        # Add the VM's IP address to the TrustedHosts list
                        Write-Output "Adding IP to TrustedHosts..."
                        Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value $env:VM_IP_Address -Concatenate -Force
                        Write-Output "Added IP to TrustedHosts"

                        # Define the username and password
                        Write-Output "Setting credentials..."
                        $username = "vagrant"
                        $password = ConvertTo-SecureString "vagrant" -AsPlainText -Force
                        $credential = New-Object System.Management.Automation.PSCredential ($username, $password)
                        Write-Output "Credentials set"

                        # Test connectivity before invoking the command
                        $maxRetries = 5
                        $retryCount = 0
                        $connected = $false

                        while (-not $connected -and $retryCount -lt $maxRetries) {
                            Write-Output "Testing connectivity, attempt $($retryCount + 1)..."
                            $connected = Test-Connection -ComputerName $env:VM_IP_Address -Count 2 -Quiet
                            Write-Output "Test-Connection result: $connected"
                            if ($connected) {
                                Write-Output "Connectivity test passed"
                            } else {
                                Write-Output "Connectivity test failed, retrying in 30 seconds..."
                                Start-Sleep -Seconds 30
                                $retryCount++
                            }
                        }

                        if (-not $connected) {
                            throw "Unable to reach VM at $env:VM_IP_Address after $maxRetries attempts"
                        }

                        # Execute Invoke-Command with the specified credentials to set the static IPv4 address
                        Write-Output "Executing Invoke-Command..."
                        Invoke-Command -ComputerName $env:VM_IP_Address -Credential $credential -ScriptBlock {
                            netsh interface ipv4 set address name='Ethernet 2' static 192.168.1.7 255.255.255.0 192.168.1.1
                        }
                        Write-Output "Invoke-Command executed successfully"

                        Write-Output "Sleeping for 2 minutes to allow command to complete..."
                        Start-Sleep -Seconds 120  # Sleep for 2 minutes to allow command to complete

                        $newIpAddress = "192.168.1.7"
                        Write-Output "Testing connectivity to new IP address..."
                        if (Test-Connection -ComputerName $newIpAddress -Count 2 -Quiet) {
                            Write-Output "Connectivity to new IP address $newIpAddress passed"
                        } else {
                            throw "Unable to reach VM at $newIpAddress"
                        }
                    } catch {
                        Write-Output "Error: $_"
                        exit 1
                    }
                    '''
                    writeFile file: 'configureIp.ps1', text: configureIpScript
                    bat '''
                    powershell -NoProfile -ExecutionPolicy Bypass -File "C:\\home\\vagrant\\agent\\workspace\\test\\configureIp.ps1"
                    '''
                }
            }
        }     
        stage('Vagrant Up linux') {
            agent {
                label 'local_machine'
            }
            when {
                expression { env.USER_INPUT == 'Linux' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    // Define the path where your Vagrantfile is located
                    def vagrantPath = 'C:/vagggrant'
                    catchError(buildResult: 'SUCCESS') {
                        bat "cd ${vagrantPath} && vagrant up"
                    }
                }
            }
        }
        stage('Generate SSH Key') {
            agent {
                label 'AnsibleController'
            }
            steps{
                script {
                    // Use 'yes' command to automatically answer 'yes' to overwrite prompt
                    sh 'yes y | ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""'
                }
            }
        }
        stage('Copy Public Key to windows Host') {
            agent {
                label 'AnsibleController'
            }
             when {
                expression { env.USER_INPUT == 'Windows' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    // Define variables
                    def remoteHost1 = '192.168.1.7'
                    def remoteUser = 'vagrant'
                    def sshKeyPath = '/home/vagrant/.ssh/id_rsa.pub'
                    def password = 'vagrant' // Provide the password here

                    // Copy SSH key to the first remote host
                    sh "sshpass -p '${password}' ssh-copy-id -o StrictHostKeyChecking=no -i ${sshKeyPath} ${remoteUser}@${remoteHost1}"

                    // Define variables for the second remote host
                    def remoteHost2 = '192.168.1.101'

                    // Copy SSH key to the second remote host
                    //sh "sshpass -p '${password}' ssh-copy-id -o StrictHostKeyChecking=no -i ${sshKeyPath} ${remoteUser}@${remoteHost2}"
                }
            }
        }
        stage('Copy Public Key to linux Host') {
            agent {
                label 'AnsibleController'
            }
            when {
                expression { env.USER_INPUT == 'Linux' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    // Define variables
                    def remoteHost1 = '192.168.1.7'
                    def remoteUser = 'vagrant'
                    def sshKeyPath = '/home/vagrant/.ssh/id_rsa.pub'
                    def password = 'vagrant' // Provide the password here

                    // Copy SSH key to the first remote host
                    //sh "sshpass -p '${password}' ssh-copy-id -o StrictHostKeyChecking=no -i ${sshKeyPath} ${remoteUser}@${remoteHost1}"

                    // Define variables for the second remote host
                    def remoteHost2 = '192.168.1.101'

                    // Copy SSH key to the second remote host
                    sh "sshpass -p '${password}' ssh-copy-id -o StrictHostKeyChecking=no -i ${sshKeyPath} ${remoteUser}@${remoteHost2}"
                }
            }
        }
        stage('Ansible Deployment windows') {
            agent {
                label 'AnsibleController'
            }
            when {
                expression { env.USER_INPUT == 'Windows' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    sh "git clone https://github.com/ramikolsi/Pfe.git"
                    sh "sudo mv -f Pfe/hosts /etc/ansible"
                    // Define the paths to the playbooks
                    def linuxPlaybookPath = 'Pfe/linuxplaybook.yaml'
                    def windowsPlaybookPath = 'Pfe/windowsplaybook.yaml'
                    def windows1PlaybookPath = 'Pfe/windows1playbook.yaml'
                    // Define the commands to execute the playbooks with sudo
                    def linuxPlaybookCommand = "sudo ansible-playbook -i /etc/ansible/hosts ${linuxPlaybookPath}"
                    def windowsPlaybookCommand = "sudo ansible-playbook -i /etc/ansible/hosts ${windowsPlaybookPath}"
                    def windows1PlaybookCommand = "sudo ansible-playbook -i /etc/ansible/hosts ${windows1PlaybookPath}"
                    // Execute the playbook commands
                    //sh linuxPlaybookCommand
                    sh windowsPlaybookCommand
                    sh windows1PlaybookCommand
                    sh "yes | rm -r Pfe"
                    sh "sudo rm /etc/ansible/hosts"
                }
            }
        }
        stage('Ansible Deployment linux') {
            agent {
                label 'AnsibleController'
            }
            when {
                expression { env.USER_INPUT == 'Linux' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    sh "git clone https://github.com/ramikolsi/Pfe.git"
                    sh "sudo mv -f Pfe/hosts /etc/ansible"
                    // Define the paths to the playbooks
                    def linuxPlaybookPath = 'Pfe/linuxplaybook.yaml'
                    def windowsPlaybookPath = 'Pfe/windowsplaybook.yaml'
                    def windows1PlaybookPath = 'Pfe/windows1playbook.yaml'
                    // Define the commands to execute the playbooks with sudo
                    def linuxPlaybookCommand = "sudo ansible-playbook -i /etc/ansible/hosts ${linuxPlaybookPath}"
                    def windowsPlaybookCommand = "sudo ansible-playbook -i /etc/ansible/hosts ${windowsPlaybookPath}"
                    def windows1PlaybookCommand = "sudo ansible-playbook -i /etc/ansible/hosts ${windows1PlaybookPath}"
                    // Execute the playbook commands
                    sh linuxPlaybookCommand
                    //sh windowsPlaybookCommand
                    //sh windows1PlaybookCommand
                    sh "yes | rm -r Pfe"
                    sh "sudo rm /etc/ansible/hosts"
                }
            }
        }

        stage('Add Node to Jenkins Linux') {
            agent {
                label 'AnsibleController'
            }
            when {
                expression { env.USER_INPUT == 'Linux' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    def existingNode = sh(
                        script: "java -jar /home/vagrant/jenkins-cli.jar -s http://192.168.1.6:8080/ -auth ramikolsi:11c0b02c3d6013047e1686b7d75729a871 get-node linux_vm",
                        returnStatus: true
                    )
                    
                    if (existingNode != 0) {
                        sh '''
                        java -jar /home/vagrant/jenkins-cli.jar -s http://192.168.1.6:8080/ -auth ramikolsi:11c0b02c3d6013047e1686b7d75729a871 create-node linux_vm <<EOF
                        <slave>
                        <name>linux_vm</name>
                        <description>linux_vm Automatically added node</description>
                        <remoteFS>/home/vagrant/agent</remoteFS>
                        <numExecutors>1</numExecutors>
                        <mode>NORMAL</mode>
                        <retentionStrategy class="hudson.slaves.RetentionStrategy$Always"/>
                        <launcher class="hudson.plugins.sshslaves.SSHLauncher" plugin="ssh-slaves@1.5">
                            <host>192.168.1.101</host>
                            <port>22</port>
                            <credentialsId>97bafce8-56bf-40ea-87d6-3170d2d28014</credentialsId>
                        </launcher>
                        <label>linux_vm</label>
                        <nodeProperties/>
                        <userId>ramikolsi</userId>
                        </slave>
                        EOF
                        '''
                    } else {
                        println("Node 'linux_vm' already exists in Jenkins.")
                    }
                }
            }
        }

        stage('Add Node to Jenkins Windows') {
            agent {
                label 'AnsibleController'
            }
            when {
                expression { env.USER_INPUT == 'Windows' || env.USER_INPUT == 'Both' }
            }
            steps {
                script {
                    def existingNode = sh(
                        script: "java -jar /home/vagrant/jenkins-cli.jar -s http://192.168.1.6:8080/ -auth ramikolsi:11c0b02c3d6013047e1686b7d75729a871 get-node windows_vm",
                        returnStatus: true
                    )
                    if (existingNode != 0) {
                    sh '''
                    java -jar /home/vagrant/jenkins-cli.jar -s http://192.168.1.6:8080/ -auth ramikolsi:11c0b02c3d6013047e1686b7d75729a871 create-node windows_vm <<EOF
                    <slave>
                      <name>windows_vm</name>
                      <description>windows_vm Automatically added node</description>
                      <remoteFS>/home/vagrant/agent</remoteFS>
                      <numExecutors>1</numExecutors>
                      <mode>NORMAL</mode>
                      <retentionStrategy class="hudson.slaves.RetentionStrategy$Always"/>
                      <launcher class="hudson.plugins.sshslaves.SSHLauncher" plugin="ssh-slaves@1.5">
                        <host>192.168.1.7</host>
                        <port>22</port>
                        <credentialsId>97bafce8-56bf-40ea-87d6-3170d2d28014</credentialsId>
                      </launcher>
                      <label>windows_vm</label>
                      <nodeProperties/>
                      <userId>ramikolsi</userId>
                    </slave>
                    EOF
                    '''
                   }else {
                        println("Node 'windows_vm' already exists in Jenkins.")
                    }
                }
            }
        }
        stage('Add Node to Jenkins new_vm') {
            agent {
                label 'AnsibleController'
            }
            when {
                expression { env.USER_INPUT == 'new_vm' }
                }
            steps {
                script {
                    def existingNode = sh(
                        script: "java -jar /home/vagrant/jenkins-cli.jar -s http://192.168.1.6:8080/ -auth ramikolsi:11c0b02c3d6013047e1686b7d75729a871 get-node linux_vm",
                        returnStatus: true
                    )
                    if (existingNode != 0) {
                    sh '''
                    java -jar /home/vagrant/jenkins-cli.jar -s http://192.168.1.6:8080/ -auth ramikolsi:11c0b02c3d6013047e1686b7d75729a871 create-node new_vm <<EOF
                    <slave>
                        <name>new_vm</name>
                        <description>new_vm Automatically added node</description>
                        <remoteFS>/home/vagrant/agent</remoteFS>
                        <numExecutors>1</numExecutors>
                        <mode>NORMAL</mode>
                        <retentionStrategy class="hudson.slaves.RetentionStrategy$Always"/>
                        <launcher class="hudson.plugins.sshslaves.SSHLauncher" plugin="ssh-slaves@1.5">
                        <host>192.168.1.102</host>
                        <port>22</port>
                        <credentialsId>97bafce8-56bf-40ea-87d6-3170d2d28014</credentialsId>
                        </launcher>
                        <label>new_vm</label>
                        <nodeProperties/>
                        <userId>ramikolsi</userId>
                    </slave>
                    EOF
                    '''
                    }else {
                        println("Node 'linux_vm' already exists in Jenkins.")
                    }
                }       
            }
        }    
        stage('Install Windows Exporter') {
            agent { label 'windows_vm' }
                        when {
                expression { env.USER_INPUT == 'Windows' || env.USER_INPUT == 'Both' }
            }
            steps {
                bat 'curl -o windows_exporter-0.25.1-amd64.msi -LJO https://github.com/prometheus-community/windows_exporter/releases/download/v0.25.1/windows_exporter-0.25.1-amd64.msi'
                bat 'msiexec /i windows_exporter-0.25.1-amd64.msi'
                bat 'sc query type= service state= all | findstr /C:"windows_exporter"'
            }
        }
        stage('Install Node Exporter on Linux VM') {
            agent { label 'linux_vm' }
            steps {
                catchError(buildResult: 'SUCCESS') {
                sh 'sudo wget https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz'
                sh 'sudo tar xvfz node_exporter-1.7.0.linux-amd64.tar.gz'
                dir('node_exporter-1.7.0.linux-amd64') {
                        sh 'sudo nohup ./node_exporter  > /dev/null 2>&1 &'
                }
                } 
            }
        }
        stage('launch a minikube cluster') {
    agent {
        label 'local_machine'
    }
                when {
                expression { env.USER_INPUT == 'Linux' || env.USER_INPUT == 'Both' }
            }
    steps { 
        // Change working directory to C:\minikube
        dir("C:\\minikube") {
            // Copy files from another directory
            bat 'xcopy /E /Y "C:\\Users\\MSI\\OneDrive\\Bureau\\Pfe\\" "C:\\minikube\\"'
            // Execute minikube start
            bat '.\\minikube start'
            // Execute kubectl commands
            bat 'kubectl create configmap prometheus-config --from-file=prometheus.yml'
            bat 'kubectl apply -f grf-deployment.yaml'
            bat 'kubectl apply -f grafana-service.yaml'
            bat 'kubectl apply -f prom-deployment.yaml'
            // bat 'kubectl apply -f prometheus.yaml'
            bat 'kubectl apply -f prom-service.yaml'
            bat 'start /B kubectl port-forward grafana-9cf84cdcd-fd69v 3000:3000'

            // Execute port-forwarding command for Prometheus in PowerShell
            powershell 'Start-Process -NoNewWindow kubectl -ArgumentList "port-forward prometheus-6549cf67f6-ccpkz 9090:9090"'
            
    }
}
    }    
}
}
